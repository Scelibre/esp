diff --git a/components/esp_system/CMakeLists.txt b/components/esp_system/CMakeLists.txt
index 0aa60f72a7..486634e652 100644
--- a/components/esp_system/CMakeLists.txt
+++ b/components/esp_system/CMakeLists.txt
@@ -40,6 +40,7 @@ else()
                                     # link-time registration is used.
                                     esp_pm app_update nvs_flash pthread app_trace esp_gdbstub
                                     espcoredump esp_phy efuse esp_ipc
+                                    stdio
                         LDFRAGMENTS "linker.lf" "app.lf")
     add_subdirectory(port)
 
diff --git a/components/esp_system/startup.c b/components/esp_system/startup.c
index 139ae8b6a2..18608d314e 100644
--- a/components/esp_system/startup.c
+++ b/components/esp_system/startup.c
@@ -54,6 +54,10 @@
 
 #include "brownout.h"
 
+#if CONFIG_VFS_USE_STDIO
+# include <stdio_vfs.h>
+#endif
+
 #include "esp_rom_sys.h"
 
 // [refactor-todo] make this file completely target-independent
@@ -268,13 +272,24 @@ static void do_core_init(void)
 
     esp_newlib_time_init();
 
-#if CONFIG_VFS_SUPPORT_IO
+#if CONFIG_VFS_USE_STDIO
+    ESP_ERROR_CHECK(stdio_vfs_register());
+#elif CONFIG_VFS_SUPPORT_IO
     // VFS console register.
     esp_err_t vfs_err = esp_vfs_console_register();
     assert(vfs_err == ESP_OK && "Failed to register vfs console");
 #endif
 
-#if defined(CONFIG_VFS_SUPPORT_IO) && !defined(CONFIG_ESP_CONSOLE_NONE)
+#if defined(CONFIG_VFS_SUPPORT_IO) && defined(CONFIG_VFS_USE_STDIO)
+    esp_reent_init(_GLOBAL_REENT);
+    _GLOBAL_REENT->_stdin  = fdopen(STDIN_FILENO, "r");
+    _GLOBAL_REENT->_stdout = fdopen(STDOUT_FILENO, "w");
+    _GLOBAL_REENT->_stderr = fdopen(STDERR_FILENO, "w+");
+
+    assert(_GLOBAL_REENT->_stdin != NULL && "Failed to __sinit stdin");
+    assert(_GLOBAL_REENT->_stdout != NULL && "Failed to __sinit stdout");
+    assert(_GLOBAL_REENT->_stderr != NULL && "Failed to __sinit stderr");
+#elif defined(CONFIG_VFS_SUPPORT_IO) && !defined(CONFIG_ESP_CONSOLE_NONE)
     const static char *default_stdio_dev = "/dev/console/";
     esp_reent_init(_GLOBAL_REENT);
     _GLOBAL_REENT->_stdin  = fopen(default_stdio_dev, "r");
diff --git a/components/vfs/Kconfig b/components/vfs/Kconfig
index 6b914d8ba3..7f761987a4 100644
--- a/components/vfs/Kconfig
+++ b/components/vfs/Kconfig
@@ -71,6 +71,10 @@ menu "Virtual file system"
         help
             Disabling this option can save memory when the support for termios.h is not required.
 
+    config VFS_USE_STDIO
+      bool "Use stdio component for VFS stdin/out/err"
+      depends on VFS_SUPPORT_IO
+      default n
 
     menu "Host File System I/O (Semihosting)"
         depends on VFS_SUPPORT_IO
